{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6b22\u8fce\uff01","text":"<p>\u8fd9\u662f\u6211\u7684 Lean \u5b66\u4e60\u7b14\u8bb0\u7f51\u7ad9\u9996\u9875\u3002</p>"},{"location":"website-setup-faq/","title":"\u4f7f\u7528 GitHub Pages \u548c MkDocs \u642d\u5efa\u7b14\u8bb0\u7f51\u7ad9\u7684\u7ecf\u9a8c","text":"<p>\u672c\u6587\u6863\u8bb0\u5f55\u4e86\u5728\u4f7f\u7528 GitHub Pages \u548c MkDocs \u642d\u5efa\u4e2a\u4eba\u7f51\u7ad9\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u95ee\u9898\u53ca\u5176\u89e3\u51b3\u65b9\u6848\u3002</p>","tags":["\u7f51\u7ad9\u642d\u5efa","GitHub Pages","MkDocs"]},{"location":"website-setup-faq/#mkdocs-github-pages","title":"MkDocs + GitHub Pages \u7f51\u7ad9\u642d\u5efa\u6d41\u7a0b","text":"<ol> <li>\u5728 GitHub \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u516c\u5f00 (Public)\u4ed3\u5e93\uff0c\u53ef\u4ee5\u4e0d\u52fe\u9009\u521d\u59cb\u5316\u6587\u4ef6\uff08\u5982 <code>README</code>\uff09\u3002</li> <li>\u5728\u672c\u5730\u7535\u8111\u4e0a\uff0c\u4f7f\u7528 <code>git clone</code> \u547d\u4ee4\u514b\u9686\u8fd9\u4e2a\u4ed3\u5e93\uff0c\u7136\u540e <code>cd</code> \u8fdb\u5165\u9879\u76ee\u6587\u4ef6\u5939\u3002</li> <li>\u8fd0\u884c <code>pip install mkdocs mkdocs-material</code> \u547d\u4ee4\uff0c\u5b89\u88c5\u5efa\u7ad9\u5de5\u5177\u548c\u4e3b\u9898\u3002</li> <li>\u5728\u9879\u76ee\u6839\u76ee\u5f55\uff0c\u624b\u52a8\u521b\u5efa\u4e09\u4e2a\u6838\u5fc3\u90e8\u5206\uff1a\u914d\u7f6e\u6587\u4ef6 <code>mkdocs.yml</code>\uff0c\u7528\u4e8e\u81ea\u52a8\u90e8\u7f72\u7684\u5de5\u4f5c\u6d41\u6587\u4ef6 <code>.github/workflows/ci.yml</code>\uff0c\u4ee5\u53ca\u5b58\u653e\u6240\u6709\u7b14\u8bb0\u7684 <code>docs</code> \u6587\u4ef6\u5939\uff08\u9700\u5728 <code>docs</code> \u5185\u518d\u521b\u5efa\u4e00\u4e2a\u9996\u9875 <code>index.md</code>\uff09\u3002</li> <li>\u5b8c\u6210\u6587\u4ef6\u521b\u5efa\u540e\uff0c\u4f7f\u7528 <code>git add .</code>\u3001<code>git commit -m \"Initial setup\"</code> \u548c <code>git push</code> \u5c06\u7f51\u7ad9\u7684\u57fa\u7840\u6846\u67b6\u63a8\u9001\u5230 GitHub\u3002</li> <li>\u5728 GitHub \u4ed3\u5e93\u7684 <code>Settings &gt; Pages</code> \u9875\u9762\uff0c\u5c06\u90e8\u7f72\u6e90 (Source) \u8bbe\u7f6e\u4e3a <code>Deploy from a branch</code>\uff0c\u7136\u540e\u4ece\u4e0b\u62c9\u83dc\u5355\u4e2d\u9009\u62e9 <code>gh-pages</code> \u5206\u652f\u5e76\u70b9\u51fb\u4fdd\u5b58\u3002</li> <li>\u7b49\u5f85 <code>Actions</code> \u81ea\u52a8\u8fd0\u884c\u6210\u529f\u540e\uff0c\u5373\u53ef\u5728 <code>Settings &gt; Pages</code> \u9875\u9762\u9876\u90e8\u627e\u5230\u5e76\u8bbf\u95ee\u7f51\u7ad9\u516c\u5f00\u5730\u5740\u3002</li> </ol> <p>\u5b8c\u6210\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u7f51\u7ad9\u5373\u642d\u5efa\u5b8c\u6bd5\u5e76\u5df2\u914d\u7f6e\u597d\u81ea\u52a8\u5316\u90e8\u7f72\u3002\u4e4b\u540e\u7684\u6240\u6709\u66f4\u65b0\uff0c\u90fd\u53ea\u9700\u5728\u672c\u5730\u4fee\u6539 <code>docs</code> \u6587\u4ef6\u5939\u5185\u7684\u6587\u4ef6\uff0c\u7136\u540e\u91cd\u590d\u7b2c\u4e94\u6b65\u7684 <code>add</code>, <code>commit</code>, <code>push</code> \u5373\u53ef\u3002</p>","tags":["\u7f51\u7ad9\u642d\u5efa","GitHub Pages","MkDocs"]},{"location":"website-setup-faq/#github-actions-404-not-found","title":"\u95ee\u9898\u4e00\uff1aGitHub Actions \u663e\u793a\u6210\u529f\uff0c\u4f46\u7f51\u7ad9\u65e0\u6cd5\u8bbf\u95ee (404 Not Found)","text":"<p>\u73b0\u8c61: \u63a8\u9001\u4ee3\u7801\u540e\uff0cGitHub Actions \u663e\u793a\u6784\u5efa\u6d41\u7a0b\u6210\u529f\uff0c\u4f46\u8bbf\u95ee\u5bf9\u5e94\u7684 GitHub Pages \u7f51\u5740\u65f6\u51fa\u73b0 404 \u9519\u8bef\u3002</p> <p>\u539f\u56e0\u5206\u6790: Actions \u6210\u529f\u8868\u793a\u7f51\u7ad9\u7684\u9759\u6001\u6587\u4ef6\u5df2\u6210\u529f\u751f\u6210\u5e76\u63a8\u9001\u5230 <code>gh-pages</code> \u5206\u652f\u3002\u7136\u800c\uff0cGitHub Pages \u670d\u52a1\u672a\u88ab\u914d\u7f6e\u4e3a\u4f7f\u7528\u6b64\u5206\u652f\u4f5c\u4e3a\u7f51\u7ad9\u6765\u6e90\u3002</p> <p>\u89e3\u51b3\u65b9\u6848: \u9700\u624b\u52a8\u8bbe\u7f6e\u4ed3\u5e93\u7684\u90e8\u7f72\u6e90\u3002</p> <ol> <li>\u8fdb\u5165\u4ed3\u5e93\u7684 Settings -&gt; Pages \u83dc\u5355\u3002</li> <li>\u5728 Build and deployment \u90e8\u5206\uff0c\u5c06 Source \u8bbe\u7f6e\u4e3a Deploy from a branch\u3002</li> <li>\u5728 Branch \u90e8\u5206\uff0c\u9009\u62e9 <code>gh-pages</code> \u5206\u652f\uff0c\u6587\u4ef6\u5939\u4fdd\u6301 <code>/(root)</code>\uff0c\u7136\u540e\u70b9\u51fb Save\u3002</li> </ol> <p>\u6b64\u8bbe\u7f6e\u5b8c\u6210\u540e\uff0cGitHub Pages \u65b9\u53ef\u53d1\u5e03 <code>gh-pages</code> \u5206\u652f\u7684\u5185\u5bb9\u3002</p>","tags":["\u7f51\u7ad9\u642d\u5efa","GitHub Pages","MkDocs"]},{"location":"website-setup-faq/#git-clonecloned-an-empty-repository","title":"\u95ee\u9898\u4e8c\uff1a\u201cgit clone\u201d\u540e\u51fa\u73b0\u201ccloned an empty repository\u201d\u8b66\u544a","text":"<p>\u73b0\u8c61: \u6267\u884c <code>git clone</code> \u547d\u4ee4\u540e\uff0c\u7ec8\u7aef\u663e\u793a <code>warning: You appear to have cloned an empty repository</code>\u3002</p> <p>\u539f\u56e0\u5206\u6790: \u6b64\u8b66\u544a\u4e3a\u9884\u671f\u884c\u4e3a\u3002\u5728 GitHub \u521b\u5efa\u4ed3\u5e93\u65f6\u672a\u9009\u62e9\u521d\u59cb\u5316\u6587\u4ef6\uff08\u5982 <code>README.md</code>\uff09\uff0c\u5bfc\u81f4\u4ed3\u5e93\u4e3a\u7a7a\u3002Git \u5de5\u5177\u514b\u9686\u65f6\u68c0\u6d4b\u5230\u6b64\u60c5\u51b5\uff0c\u6545\u7ed9\u51fa\u63d0\u793a\u3002</p> <p>\u89e3\u51b3\u65b9\u6848: \u65e0\u9700\u64cd\u4f5c\u3002\u53ef\u76f4\u63a5\u8fdb\u5165\u65b0\u521b\u5efa\u7684\u6587\u4ef6\u5939\uff0c\u5f00\u59cb\u6dfb\u52a0\u9879\u76ee\u6587\u4ef6\uff08\u5982 <code>mkdocs.yml</code> \u548c <code>docs</code> \u76ee\u5f55\uff09\u3002</p>","tags":["\u7f51\u7ad9\u642d\u5efa","GitHub Pages","MkDocs"]},{"location":"website-setup-faq/#mkdocsyml","title":"\u95ee\u9898\u4e09\uff1a\u201cmkdocs.yml\u201d\u6587\u4ef6\u7684\u6b63\u786e\u4f4d\u7f6e","text":"<p>\u73b0\u8c61: \u6267\u884c <code>mkdocs serve</code> \u6216\u90e8\u7f72\u65f6\u51fa\u73b0\u9519\u8bef\uff0c\u63d0\u793a\u627e\u4e0d\u5230\u914d\u7f6e\u6587\u4ef6\u6216 <code>docs</code> \u76ee\u5f55\u3002</p> <p>\u539f\u56e0\u5206\u6790: <code>mkdocs.yml</code> \u6587\u4ef6\u4f4d\u7f6e\u4e0d\u6b63\u786e\u3002\u4f5c\u4e3a MkDocs \u9879\u76ee\u7684\u6838\u5fc3\uff0c\u5176\u5fc5\u987b\u4f4d\u4e8e\u7279\u5b9a\u4f4d\u7f6e\u624d\u80fd\u88ab\u8bc6\u522b\u3002</p> <p>\u89e3\u51b3\u65b9\u6848: <code>mkdocs.yml</code> \u6587\u4ef6\u5fc5\u987b\u653e\u7f6e\u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\uff0c\u4e0e <code>docs</code> \u6587\u4ef6\u5939\u5904\u4e8e\u540c\u4e00\u7ea7\u522b\u3002</p> <p>\u6b63\u786e\u7684\u76ee\u5f55\u7ed3\u6784\u793a\u4f8b\uff1a my-lean-notes/ \u251c\u2500\u2500 docs/ \u2502   \u2514\u2500\u2500 index.md \u2514\u2500\u2500 mkdocs.yml</p>","tags":["\u7f51\u7ad9\u642d\u5efa","GitHub Pages","MkDocs"]},{"location":"lean/search/meta/","title":"\u5143\u7f16\u7a0b\u641c\u7d22","text":"<p>\u901a\u8fc7\u5143\u7f16\u7a0b\u4e5f\u53ef\u4ee5\u4ece\u5df2\u5728\u73af\u5883\u4e2d\u6ce8\u518c\u8fc7\u7684\u5e38\u91cf\u4e2d\u5feb\u901f\u641c\u7d22\u6211\u4eec\u60f3\u8981\u7684\u5b9a\u7406\u3002</p> <p>\u4ee5\u4e0b\u4ee3\u7801\u7531\u5927\u4f6c@sinianluoye \u63d0\u4f9b\uff0c\u5728\u6b64\u8868\u793a\u611f\u8c22</p> <pre><code>import Lean\n\nopen Lean\nopen Lean.Elab\nopen Lean.Elab.Command\n\n/--\n`find_thms \"xxx\" \"yyy\" \"-zzz\" \u2026`\n\u5728\u5f53\u524d\u73af\u5883\u4e2d\u67e5\u627e\u5305\u542b xxx \u4e14\u5305\u542b yyy \u4f46\u4e0d\u5305\u542b zzz \u7684\u5b9a\u7406\u3002\n\u5b9a\u7406\u7684\u5206\u8bcd\u662f\u6309 `.` \u548c `_` \u5206\u5272\u7684\n-/\nsyntax (name := findThms) \"#find_thms\" (str)+ : command\n\n@[command_elab findThms]\ndef elabFindThms : CommandElab := fun stx =&gt; do\n  let args := stx[1].getArgs.map fun s =&gt;\n    s.isStrLit?\n    |&gt;.get!\n\n  let env \u2190 getEnv\n\n  let filter_name := fun (nm: Name) =&gt;\n    let nameStr := nm.toString\n    let p1 := nameStr.splitOn \".\"\n    let parts := p1.map (fun s =&gt; s.splitOn \"_\")\n    \u00ac nm.isInternal \u2227 args.all fun a =&gt;\n      if a.startsWith \"-\"\n      then parts.flatten.all fun p =&gt; (a.toSubstring.drop 1).toString \u2260 p\n      else parts.flatten.any fun p =&gt; a = p\n\n\n  let thms :=\n    env.constants.toList.foldl (init := #[]) fun acc (nm, cinfo) =&gt;\n      match cinfo with\n      | ConstantInfo.thmInfo .. =&gt; acc.push (nm, cinfo)\n      | _ =&gt; acc\n\n  let res := thms.filter (fun (nm, _) =&gt; filter_name nm)\n\n  if res.isEmpty then\n    logInfo m!\"[find_thms] no matching theorems\"\n  else\n    for item in res do\n      let info := item.2\n      let msg := match info with\n      | ConstantInfo.thmInfo val =&gt; val.type\n      | _ =&gt; panic! \"unexpected constant info type\"\n      logInfo m!\"{item.1}:\\n{msg}\"\n\n#find_thms \"gaussian\" \"col\" \"-aux\"\n</code></pre> <p>\u6b64\u5916\uff0c\u6211\u53c8\u6839\u636e\u5b66\u4e60lean\u7684\u9700\u6c42\u6539\u5199\u4e86\u4e00\u4efd\u7528\u4e8e\u67e5\u770b\u5df2\u6709\u5b9a\u7406\u4f9d\u8d56\u7684\u4ee3\u7801</p> <pre><code>import Lean\nimport Std.Data.HashSet\nimport Lean.Data.Json\n\nopen Lean\nopen Lean.Elab\nopen Lean.Elab.Command\nopen Std (HashSet HashMap)\n\n-- \u4f9d\u8d56\u5c42\u7ea7\u7ed3\u6784\nstructure DependencyLayer where\n  depth : Nat\n  theorems : Array Name\nderiving Repr, ToJson, FromJson\n\n-- \u4f9d\u8d56\u5173\u7cfb\u6570\u636e\u7ed3\u6784\nstructure DependencyGraph where\n  rootTheorem : Name\n  layers : Array DependencyLayer\n  edges : HashMap Name (Array Name)  -- \u6bcf\u4e2a\u5b9a\u7406\u7684\u76f4\u63a5\u4f9d\u8d56\nderiving Repr, Nonempty\n\n-- \u63d0\u53d6\u8868\u8fbe\u5f0f\u4e2d\u5f15\u7528\u7684\u6240\u6709\u5e38\u91cf\u540d\ndef references (expr : Expr) : HashSet Name :=\n  let rec go (e : Expr) (acc : HashSet Name) : HashSet Name :=\n    match e with\n    | .const name _ =&gt; acc.insert name\n    | .app f arg =&gt; go arg (go f acc)\n    | .lam _ type body _ =&gt; go body (go type acc)\n    | .forallE _ type body _ =&gt; go body (go type acc)\n    | .letE _ type value body _ =&gt; go body (go value (go type acc))\n    | .mdata _ expr =&gt; go expr acc\n    | .proj _ _ struct =&gt; go struct acc\n    | _ =&gt; acc\n  go expr \u2205\n\n-- \u68c0\u67e5\u5e38\u91cf\u662f\u5426\u4e3a\u5b9a\u7406\u7684\u8f85\u52a9\u51fd\u6570\ndef isTheorem (env : Environment) (name : Name) : Bool :=\n  match getOriginalConstKind? env name with\n  | some (.thm) =&gt; true\n  | _ =&gt; false\n\n-- \u83b7\u53d6\u5b9a\u7406\u7684\u76f4\u63a5\u4f9d\u8d56\ndef getDirectDependencies (env : Environment) (theoremName : Name) : Array Name :=\n  match env.find? theoremName with\n  | some constInfo =&gt;\n    let typeRefs := references constInfo.type\n    let valueRefs := constInfo.value?.map references |&gt;.getD \u2205\n    let allRefs := typeRefs \u222a valueRefs\n    -- \u8fc7\u6ee4\u6389\u5185\u7f6e\u7c7b\u578b\u3001\u5f53\u524d\u5b9a\u7406\u672c\u8eab\uff0c\u53ea\u4fdd\u7559\u5b9a\u7406\n    allRefs.toArray.filter fun name =&gt;\n      name != theoremName &amp;&amp;\n      !name.isInternal &amp;&amp;\n      isTheorem env name\n  | none =&gt; #[]\n\n/--\n`#find_deps \"theorem_name\"`\n\u67e5\u627e\u6307\u5b9a\u5b9a\u7406\u7684\u6240\u6709\u4f9d\u8d56\u5b9a\u7406\n-/\nsyntax (name := findDeps) \"#find_deps\" str : command\n\n@[command_elab findDeps]\ndef elabFindDeps : CommandElab := fun stx =&gt; do\n  let theoremNameStr := stx[1].isStrLit?.get!\n  let theoremName := theoremNameStr.toName\n\n  let env \u2190 getEnv\n\n  -- \u68c0\u67e5\u5b9a\u7406\u662f\u5426\u5b58\u5728\n  match env.find? theoremName with\n  | none =&gt;\n    logError m!\"Theorem '{theoremName}' not found\"\n    return\n  | some constInfo =&gt;\n    if !isTheorem env theoremName then\n      logError m!\"'{theoremName}' is not a theorem\"\n      return\n\n    let deps := getDirectDependencies env theoremName\n\n    if deps.isEmpty then\n      logInfo m!\"[find_deps] '{theoremName}' has no theorem dependencies\"\n    else\n      logInfo m!\"[find_deps] Dependencies of '{theoremName}':\"\n      for dep in deps.qsort Name.lt do\n        match env.find? dep with\n        | some depInfo =&gt;\n          let depType := match depInfo with\n          | ConstantInfo.thmInfo val =&gt; val.type\n          | _ =&gt; panic! \"unexpected constant info type\"\n          logInfo m!\"  {dep}: {depType}\"\n        | none =&gt; continue\n\n/--\n`#find_all_deps \"theorem_name\"`\n\u9012\u5f52\u67e5\u627e\u6307\u5b9a\u5b9a\u7406\u7684\u6240\u6709\u4f9d\u8d56\u5b9a\u7406\uff08\u5305\u62ec\u95f4\u63a5\u4f9d\u8d56\uff09\n-/\nsyntax (name := findAllDeps) \"#find_all_deps\" str : command\n\n/--\n`#find_deps_depth \"theorem_name\" depth`\n\u67e5\u627e\u6307\u5b9a\u5b9a\u7406\u7684\u4f9d\u8d56\u5b9a\u7406\uff0c\u9650\u5236\u641c\u7d22\u6df1\u5ea6\uff0c\u6309\u5c42\u7ea7\u663e\u793a\n-/\nsyntax (name := findDepsDepth) \"#find_deps_depth\" str num : command\n\n/--\n`#export_deps_json \"theorem_name\" depth \"filename\"`\n\u5bfc\u51fa\u4f9d\u8d56\u5173\u7cfb\u5230JSON\u6587\u4ef6\u4f9bPython\u53ef\u89c6\u5316\n-/\nsyntax (name := exportDepsJson) \"#export_deps_json\" str num str : command\n\n-- \u9012\u5f52\u83b7\u53d6\u6240\u6709\u4f9d\u8d56\npartial def getAllDependencies (env : Environment) (theoremName : Name) (visited : HashSet Name := \u2205) : HashSet Name :=\n  if visited.contains theoremName then\n    visited\n  else\n    let directDeps := getDirectDependencies env theoremName\n    let newVisited := visited.insert theoremName\n    directDeps.foldl (fun acc dep =&gt; getAllDependencies env dep acc) newVisited\n\n-- \u83b7\u53d6\u6307\u5b9a\u6df1\u5ea6\u7684\u4f9d\u8d56\uff08\u6309\u5c42\u7ea7\u7ec4\u7ec7\uff09\npartial def getDependenciesByLayers (env : Environment) (theoremName : Name) (maxDepth : Nat) : DependencyGraph :=\n  let rec buildLayers (currentLayer : Array Name) (depth : Nat) (visited : HashSet Name) (edges : HashMap Name (Array Name)) (layers : Array DependencyLayer) : DependencyGraph :=\n    if depth &gt;= maxDepth || currentLayer.isEmpty then\n      { rootTheorem := theoremName, layers := layers, edges := edges }\n    else\n      let (nextLayer, newVisited, newEdges) := currentLayer.foldl (fun (nextAcc, visitedAcc, edgesAcc) thm =&gt;\n        if visitedAcc.contains thm then\n          (nextAcc, visitedAcc, edgesAcc)\n        else\n          let newVisitedAcc := visitedAcc.insert thm\n          let deps := getDirectDependencies env thm\n          let newEdgesAcc := edgesAcc.insert thm deps\n          let newNextAcc := deps.foldl (fun acc dep =&gt;\n            if !newVisitedAcc.contains dep then acc.push dep else acc) nextAcc\n          (newNextAcc, newVisitedAcc, newEdgesAcc)\n      ) (#[], visited, edges)\n\n      let currentLayerData : DependencyLayer := { depth := depth, theorems := currentLayer }\n      let newLayers := layers.push currentLayerData\n      buildLayers nextLayer (depth + 1) newVisited newEdges newLayers\n\n  buildLayers #[theoremName] 0 \u2205 \u2205 #[]\n\n@[command_elab findAllDeps]\ndef elabFindAllDeps : CommandElab := fun stx =&gt; do\n  let theoremNameStr := stx[1].isStrLit?.get!\n  let theoremName := theoremNameStr.toName\n\n  let env \u2190 getEnv\n\n  -- \u68c0\u67e5\u5b9a\u7406\u662f\u5426\u5b58\u5728\n  match env.find? theoremName with\n  | none =&gt;\n    logError m!\"Theorem '{theoremName}' not found\"\n    return\n  | some constInfo =&gt;\n    if !isTheorem env theoremName then\n      logError m!\"'{theoremName}' is not a theorem\"\n      return\n\n    let allDeps := getAllDependencies env theoremName\n    let filteredDeps := allDeps.toArray.filter (\u00b7 != theoremName)\n\n    if filteredDeps.isEmpty then\n      logInfo m!\"[find_all_deps] '{theoremName}' has no theorem dependencies\"\n    else\n      logInfo m!\"[find_all_deps] All dependencies of '{theoremName}' ({filteredDeps.size} theorems):\"\n      for dep in filteredDeps.qsort Name.lt do\n        logInfo m!\"  {dep}\"\n\n@[command_elab findDepsDepth]\ndef elabFindDepsDepth : CommandElab := fun stx =&gt; do\n  let theoremNameStr := stx[1].isStrLit?.get!\n  let theoremName := theoremNameStr.toName\n  let depthLit := stx[2]\n  let depth := depthLit.isNatLit?.get!\n\n  let env \u2190 getEnv\n\n  -- \u68c0\u67e5\u5b9a\u7406\u662f\u5426\u5b58\u5728\n  match env.find? theoremName with\n  | none =&gt;\n    logError m!\"Theorem '{theoremName}' not found\"\n    return\n  | some constInfo =&gt;\n    if !isTheorem env theoremName then\n      logError m!\"'{theoremName}' is not a theorem\"\n      return\n\n    let depGraph := getDependenciesByLayers env theoremName depth\n    let totalCount := depGraph.layers.foldl (fun acc layer =&gt; acc + layer.theorems.size) 0\n\n    logInfo m!\"[find_deps_depth] Dependencies of '{theoremName}' within depth {depth} ({totalCount} theorems):\"\n\n    for layer in depGraph.layers do\n      if layer.theorems.size &gt; 0 then\n        logInfo m!\"  Layer {layer.depth} ({layer.theorems.size} theorems):\"\n        for thm in layer.theorems.qsort Name.lt do\n          if thm != theoremName then  -- \u4e0d\u663e\u793a\u6839\u5b9a\u7406\u672c\u8eab\n            -- \u663e\u793a\u8be5\u5b9a\u7406\u7684\u76f4\u63a5\u4f9d\u8d56\n            match depGraph.edges.get? thm with\n            | some deps =&gt;\n              if deps.size &gt; 0 then\n                let depsStr := deps.foldl (fun acc dep =&gt; acc ++ s!\" {dep}\") \"\"\n                logInfo m!\"    {thm} \u2192 depends on:{depsStr}\"\n              else\n                logInfo m!\"    {thm}\"\n            | none =&gt; logInfo m!\"    {thm}\"\n\n@[command_elab exportDepsJson]\ndef elabExportDepsJson : CommandElab := fun stx =&gt; do\n  let theoremNameStr := stx[1].isStrLit?.get!\n  let theoremName := theoremNameStr.toName\n  let depthLit := stx[2]\n  let depth := depthLit.isNatLit?.get!\n  let filename := stx[3].isStrLit?.get!\n\n  let env \u2190 getEnv\n\n  -- \u68c0\u67e5\u5b9a\u7406\u662f\u5426\u5b58\u5728\n  match env.find? theoremName with\n  | none =&gt;\n    logError m!\"Theorem '{theoremName}' not found\"\n    return\n  | some constInfo =&gt;\n    if !isTheorem env theoremName then\n      logError m!\"'{theoremName}' is not a theorem\"\n      return\n\n    let depGraph := getDependenciesByLayers env theoremName depth\n\n    -- \u6784\u5efa\u8fb9\u7684JSON\u8868\u793a\n    let edgesList := depGraph.edges.fold (fun acc thmName deps =&gt;\n      (thmName.toString, Json.arr (deps.map (Json.str \u2218 Name.toString))) :: acc) []\n\n    let jsonData := Json.mkObj [\n      (\"root_theorem\", Json.str theoremName.toString),\n      (\"max_depth\", Json.num depth),\n      (\"layers\", Json.arr (depGraph.layers.map fun layer =&gt;\n        Json.mkObj [\n          (\"depth\", Json.num layer.depth),\n          (\"theorems\", Json.arr (layer.theorems.map (Json.str \u2218 Name.toString)))\n        ])),\n      (\"edges\", Json.mkObj edgesList)\n    ]\n\n    -- \u5199\u5165\u6587\u4ef6\n    IO.FS.writeFile filename (toString jsonData)\n    logInfo m!\"[export_deps_json] Exported dependency graph to '{filename}'\"\n\n-- \u6d4b\u8bd5\u7528\u4f8b\uff08\u53ef\u4ee5\u76f4\u63a5\u5728\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u4f7f\u7528\uff09\n#check Nat.lt_trichotomy\n#find_deps \"Nat.lt_trichotomy\"\n#find_deps_depth \"Nat.lt_trichotomy\" 2\n#find_deps_depth \"Nat.lt_trichotomy\" 3\n#export_deps_json \"Nat.lt_trichotomy\" 3 \"nat_lt_trichotomy_deps.json\"\n#find_all_deps \"Nat.lt_trichotomy\"\n</code></pre>"},{"location":"lean/search/meta/#_2","title":"\u4f7f\u7528\u65b9\u6cd5","text":"<p>\u6dfb\u52a0\u4e00\u4efdlean\u6587\u4ef6\u5728\u9879\u76ee\u4e0b\uff0c\u9700\u8981\u4f7f\u7528\u5230\u8be5\u5de5\u5177\u7684\u65f6import\u8fd9\u4efd\u6587\u4ef6\uff0c\u4e2a\u4eba\u7ecf\u9a8c\u662f\u9700\u8981\u6ce8\u610f\u5728import Mathlib\u4e4b\u524d\u3002</p>"},{"location":"lean/search/precise-search/","title":"Precise search","text":""},{"location":"lean/search/precise-search/#lean","title":"Lean \u5b9a\u7406\u7cbe\u786e\u641c\u7d22","text":"<p>Mathlib \u6570\u5b66\u5e93\u4e2d\u5305\u542b\u4e86\u6210\u5343\u4e0a\u4e07\u6761\u5f15\u7406\uff0c\u5982\u4f55\u624d\u80fd\u9ad8\u6548\u5730\u627e\u5230\u9700\u8981\u7684\u90a3\u4e00\u6761\uff1f</p> <p>\u4ec5\u4ec5\u901a\u8fc7\u8bb0\u5fc6\u5f15\u7406\u7684\u540d\u79f0\u6216\u6a21\u7cca\u7684\u5173\u952e\u8bcd\u8fdb\u884c\u641c\u7d22\uff0c\u5f80\u5f80\u5982\u540c\u5927\u6d77\u635e\u9488\u3002\u66f4\u6709\u6548\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u8868\u8fbe\u5f0f\u7ed3\u6784\u8fdb\u884c\u7cbe\u786e\u7684\u5b9a\u4f4d\u3002\u8fd9\u7bc7\u7b14\u8bb0\u4ecb\u7ecd Loogle \u7684\u4f7f\u7528\u65b9\u6cd5\u3002</p>"},{"location":"lean/search/precise-search/#_1","title":"\u5b98\u7f51\u4ecb\u7ecd\u7684\u7ffb\u8bd1","text":""},{"location":"lean/search/precise-search/#_2","title":"\u5173\u4e8e","text":"<p>Loogle \u641c\u7d22 Lean \u548c Mathlib \u4e2d\u7684\u5b9a\u4e49\u4e0e\u5b9a\u7406\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728 Lean4 \u7684 VSCode \u8bed\u8a00\u6269\u5c55\u4e2d\u901a\u8fc7\uff08\u9ed8\u8ba4\u4e3a\uff09<code>Ctrl-K</code> <code>Ctrl-S</code> \u6765\u4f7f\u7528 Loogle\u3002\u4f60\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u6765\u81ea <code>LeanSearchClient</code> \u7684 <code>#loogle</code> \u547d\u4ee4\u3001CLI \u7248\u672c\u3001Loogle VS Code \u6269\u5c55\u3001<code>lean.nvim</code> \u96c6\u6210\u6216 Zulip \u673a\u5668\u4eba\u3002</p>"},{"location":"lean/search/precise-search/#_3","title":"\u7528\u6cd5","text":"<p>Loogle \u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u5bfb\u627e\u5b9a\u4e49\u548c\u5f15\u7406\uff1a</p>"},{"location":"lean/search/precise-search/#_4","title":"\u901a\u8fc7\u5e38\u91cf\uff1a","text":"<p>\ud83d\udd0d Real.sin</p> <p>\u67e5\u627e\u6240\u6709\u547d\u9898\u4e2d\u4ee5\u4efb\u4f55\u65b9\u5f0f\u63d0\u53ca\u6b63\u5f26\u51fd\u6570\u7684\u5f15\u7406\u3002</p>"},{"location":"lean/search/precise-search/#_5","title":"\u901a\u8fc7\u5f15\u7406\u540d\u79f0\u7684\u5b50\u5b57\u7b26\u4e32\uff1a","text":"<p>\ud83d\udd0d \"differ\"</p> <p>\u67e5\u627e\u6240\u6709\u5728\u5176\u5f15\u7406\u540d\u79f0\u4e2d\u67d0\u5904\u5305\u542b \"differ\" \u7684\u5f15\u7406\u3002</p>"},{"location":"lean/search/precise-search/#_6","title":"\u901a\u8fc7\u5b50\u8868\u8fbe\u5f0f\uff1a","text":"<p>\ud83d\udd0d _ * ( ^ )</p> <p>\u67e5\u627e\u6240\u6709\u547d\u9898\u4e2d\u67d0\u5904\u5305\u542b\u4e00\u4e2a\u4e58\u79ef\uff0c\u4e14\u5176\u7b2c\u4e8c\u4e2a\u53c2\u6570\u88ab\u63d0\u5347\u5230\u67d0\u4e2a\u6b21\u65b9\u7684\u5f15\u7406\u3002</p> <p>\u6a21\u5f0f\u4e5f\u53ef\u4ee5\u662f\u975e\u7ebf\u6027\u7684\uff0c\u5982\uff1a</p> <p>\ud83d\udd0d Real.sqrt ?a * Real.sqrt ?a</p> <p>\u5982\u679c\u6a21\u5f0f\u6709\u53c2\u6570\uff0c\u5b83\u4eec\u4f1a\u4ee5\u4efb\u610f\u987a\u5e8f\u8fdb\u884c\u5339\u914d\u3002\u4e0b\u9762\u4e24\u8005\u90fd\u4f1a\u627e\u5230 List.map\uff1a</p> <p>\ud83d\udd0d (?a -&gt; ?b) -&gt; List ?a -&gt; List ?b</p> <p>\ud83d\udd0d List ?a -&gt; (?a -&gt; ?b) -&gt; List ?b</p>"},{"location":"lean/search/precise-search/#_7","title":"\u901a\u8fc7\u4e3b\u7ed3\u8bba\uff1a","text":"<p>\ud83d\udd0d |- tsum _ = _ * tsum _</p> <p>\u67e5\u627e\u6240\u6709\u7ed3\u8bba\uff08\u5373\u4f4d\u4e8e\u6240\u6709 \u2192 \u548c \u2200 \u53f3\u4fa7\u7684\u5b50\u8868\u8fbe\u5f0f\uff09\u5177\u6709\u7ed9\u5b9a\u5f62\u72b6\u7684\u5f15\u7406\u3002</p> <p>\u548c\u4e4b\u524d\u4e00\u6837\uff0c\u5982\u679c\u6a21\u5f0f\u6709\u53c2\u6570\uff0c\u5b83\u4eec\u4f1a\u4ee5\u4efb\u610f\u987a\u5e8f\u4e0e\u5f15\u7406\u7684\u524d\u63d0\u8fdb\u884c\u5339\u914d\uff1b\u4f8b\u5982\uff0c</p> <p>\ud83d\udd0d |- _ &lt; _ \u2192 tsum _ &lt; tsum _</p> <p>\u5c06\u4f1a\u627e\u5230 tsum_lt_tsum\uff0c\u5373\u4f7f\u524d\u63d0 f i &lt; g i \u5e76\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u3002</p> <p>\u5982\u679c\u4f60\u4f20\u9012\u591a\u4e2a\u7528\u9017\u53f7\u5206\u9694\u7684\u641c\u7d22\u8fc7\u6ee4\u5668\uff0cLoogle \u5c06\u8fd4\u56de\u5339\u914d\u6240\u6709\u8fd9\u4e9b\u8fc7\u6ee4\u5668\u7684\u5f15\u7406\u3002\u641c\u7d22</p> <p>\ud83d\udd0d Real.sin, \"two\", tsum, _ * , _ ^ , |- _ &lt; _ \u2192 _</p> <p>\u5c06\u4f1a\u627e\u5230\u6240\u6709\u63d0\u53ca\u5e38\u91cf Real.sin \u548c tsum\uff0c\u5f15\u7406\u540d\u79f0\u4e2d\u5305\u542b\u5b50\u5b57\u7b26\u4e32 \"two\"\uff0c\u7c7b\u578b\u4e2d\u67d0\u5904\u5305\u542b\u4e58\u79ef\u548c\u5e42\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u5f62\u5982 _ &lt; _ \u7684\u524d\u63d0\u7684\u5f15\u7406\uff08\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u5f15\u7406\u7684\u8bdd\uff09\u3002\u5143\u53d8\u91cf (?a) \u5728\u6bcf\u4e2a\u8fc7\u6ee4\u5668\u4e2d\u662f\u72ec\u7acb\u5206\u914d\u7684\u3002</p>"},{"location":"lean/search/precise-search/#_8","title":"\u4e2a\u4eba\u7406\u89e3\u603b\u7ed3","text":"<p>Loogle \u662f\u4e00\u6b3e\u4e13\u4e3a Lean \u4e0e Mathlib \u8bbe\u8ba1\u7684\u641c\u7d22\u5de5\u5177\uff0c\u53ef\u5728\u4ee5\u4e0b\u73af\u5883\u8c03\u7528\uff1a - VS Code \u5b98\u65b9Lean\u6269\u5c55\uff1a\u53ef\u4ee5\u8bbe\u7f6e\u5feb\u6377\u952e\u4ee5\u5728\u4fa7\u8fb9\u680f\u4e2d\u5feb\u901f\u6253\u5f00 Loogle \u754c\u9762\u4f7f\u7528\uff0c\u4f7f\u7528\u7ec4\u5408\u952e <code>Ctrl-K Ctrl-S</code>\u6253\u5f00\u8bbe\u7f6e\u754c\u9762\uff0c\u641c\u7d22 Loogle \u4e3a\u5176\u8bbe\u7f6e\u5feb\u6377\u952e\u3002 - <code>#loogle</code> \u547d\u4ee4\uff08\u7531 LeanSearchClient \u63d0\u4f9b\uff09 - CLI\u3001VS Code \u6269\u5c55\u3001lean.nvim\u3001Zulip \u673a\u5668\u4eba  </p>"},{"location":"lean/search/precise-search/#_9","title":"\u7528\u6cd5\u901f\u89c8","text":"\u641c\u7d22\u65b9\u5f0f \u793a\u4f8b \u8bf4\u660e \u5e38\u91cf <code>Real.sin</code> \u8fd4\u56de\u6240\u6709\u7528\u5230 <code>Real.sin</code> \u7684\u5b9a\u7406 \u540d\u79f0\u7247\u6bb5 <code>\"differ\"</code> \u8fd4\u56de\u540d\u79f0\u5b57\u7b26\u4e32\u4e2d\u5305\u542b\u5b50\u4e32 <code>differ</code> \u7684\u5b9a\u7406 \u5b50\u8868\u8fbe\u5f0f <code>_ * (_ ^ _)</code> \u8fd4\u56de\u7c7b\u578b\u4e2d\u5b58\u5728\u201c\u4e58\u65b9\u540e\u518d\u76f8\u4e58\u201d\u6a21\u5f0f\u7684\u5b9a\u7406 \u975e\u7ebf\u6027\u6a21\u5f0f <code>Real.sqrt ?a * Real.sqrt ?a</code> <code>?a</code> \u5728\u540c\u4e00\u4f4d\u7f6e\u91cd\u590d\u51fa\u73b0\uff0c\u53ef\u5339\u914d\u5e73\u65b9\u6839\u76f8\u4e58\u7684\u5b9a\u7406\uff08\u6211\u7406\u89e3\u4e3a\u539f\u53d8\u91cf\uff0c\u7c7b\u4f3c\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u4f7f\u7528\u7684$1\uff09 \u4e3b\u7ed3\u8bba <code>|- tsum _ = _ * tsum _</code> \u4ec5\u5339\u914d\u7ed3\u8bba\uff08\u6700\u53f3\u4fa7\u8868\u8fbe\u5f0f\uff09\u7b26\u5408\u6a21\u5f0f\u7684\u5b9a\u7406 \u524d\u63d0\u6a21\u5f0f <code>|- _ &lt; _ \u2192 tsum _ &lt; tsum _</code> \u5373\u4f7f\u524d\u63d0\u987a\u5e8f\u4e0d\u540c\uff0c\u4e5f\u80fd\u5339\u914d <code>tsum_lt_tsum</code> <p>\u7ec4\u5408\u8fc7\u6ee4 <code>,</code> \u534a\u89d2\u9017\u53f7\u8fde\u63a5\u591a\u4e2a\u6761\u4ef6\uff0c\u7ed3\u679c\u4e3a\u4ea4\u96c6\u3002\u793a\u4f8b\uff1a  </p> <p><pre><code>Real.sin, \"two\", tsum, _ * _, _ ^ _, |- _ &lt; _ \u2192 _\n</code></pre> \u5b9a\u7406\u5fc5\u987b\u540c\u65f6\u6ee1\u8db3\u4ee5\u4e0a\u5168\u90e8\u7ea6\u675f\u624d\u4f1a\u88ab\u5217\u51fa\u3002</p>"},{"location":"lean/tools/lean-tools/","title":"\u5de5\u5177\u6c47\u96c6","text":""},{"location":"lean/tools/lean-tools/#_2","title":"\u641c\u7d22\uff1a","text":"<p>LeanSearch\uff0c\u652f\u6301\u81ea\u7136\u8bed\u8a00\u641c\u7d22\uff0c \u81ea\u5e26\u8bed\u4e49\u589e\u5f3a\u529f\u80fd</p> <p>LeanExplore\uff0c\u652f\u6301\u81ea\u7136\u8bed\u8a00\u641c\u7d22</p> <p>Moogle\uff0c\u7248\u672c\u8f83\u8001</p> <p>Loogle!\uff0c\u652f\u6301\u6309\u8868\u8fbe\u5f0f\u548c\u5b57\u7b26\u4e32\u641c\u7d22</p> <p>Lean State Search\uff0c\u652f\u6301\u6839\u636e\u72b6\u6001\u641c\u7d22\uff0c\u5fc5\u987b\u5305\u542b\u22a2</p>"},{"location":"lean/tools/lean-tools/#_3","title":"\u7f16\u8bd1\uff1a","text":"<p>\u5b98\u65b9playground \u5728\u7ebf\u7f16\u8bd1\u5668\uff0c\u4ec5\u652f\u6301\u6700\u65b0\u5206\u652f\u548c\u6700\u65b0\u53d1\u884c\u7248</p> <p>ReasLab IDE\uff0c\u540c\u65f6\u63d0\u4f9b\u4e86\u5f88\u591aLean\u6559\u7a0b\u7684\u6a21\u7248</p>"},{"location":"lean/tools/lean-tools/#_4","title":"\u8bc1\u660e\uff1a","text":"<p>Kimina Prover Demo\uff0c\u7528\u4e8e\u8c03\u7528\u6a21\u578b\u89e3\u51b3lean\u8bc1\u660e\uff0c\u652f\u6301\u81ea\u7136\u8bed\u8a00\u8f93\u5165\uff0c\u5148\u5c06\u95ee\u9898\u8f6c\u6362\u4e3alean\u5f62\u5f0f\u5316\u63cf\u8ff0\u518d\u505a\u8bc1\u660e\uff0c\u53ef\u4ee5\u540c\u65f6\u505a16\u79cd\u5c1d\u8bd5</p>"},{"location":"lean/tools/lean-tools/#_5","title":"\u5927\u8bed\u8a00\u6a21\u578b\uff1a","text":"<p>Google AI Studio\uff0c\u53ef\u4ee5\u4f7f\u7528Gemini 2.5 Pro\uff0c\u76f8\u6bd4\u76f4\u63a5\u7684Gemini\u7f51\u9875\u8c03\u6574\u529f\u80fd\u66f4\u591a</p> <p>Claude</p> <p>DeepSeek</p> <p>Kimi</p>"},{"location":"lean/tools/lean-tools/#_6","title":"\u4e5f\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u5982\u4e0b\u5e73\u53f0\uff0c\u6309\u9700\u4ed8\u8d39","text":"<p>OpenRouter</p>"},{"location":"lean/tools/other-tools/","title":"\u5de5\u5177\u6c47\u96c6","text":""},{"location":"lean/tools/other-tools/#lean","title":"\u4e0eLean\u5185\u5bb9\u65e0\u5173\uff0c\u4f46\u662f\u63d0\u9ad8\u6548\u7387\u7684\u4e00\u4e9b\u5176\u4ed6\u5de5\u5177","text":"<p>Pixpin\uff0c\u622a\u56fe\u8d34\u56fe</p> <p>WGestures\uff0c\u9f20\u6807\u624b\u52bf</p> <p>Listary\uff0c\u5168\u76d8\u641c\u7d22</p> <p>Everything\uff0c\u5168\u76d8\u641c\u7d22</p> <p>Ditto\uff0c\u526a\u5207\u677f\u589e\u5f3a\uff0c\u6216\u8005\u8003\u8651\u4f7f\u7528Win+V</p> <p>f.lux\uff0c\u62a4\u773c</p> <p>Spiritual Touch\uff0c\u9f20\u6807\u624b\u52bf\uff0c\u4e0d\u8fc7\u6ca1\u6709\u4f7f\u7528\u8fc7</p> <p>MouseInc\uff0c\u9f20\u6807\u624b\u52bf\uff0c\u5df2\u505c\u6b62\u66f4\u65b0</p>"}]}